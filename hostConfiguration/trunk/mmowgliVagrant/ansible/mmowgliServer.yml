## Ansible file for configuring the mmowgli file server, database server, etc.
## There should be one of these.
---
- hosts: mmowgliServer
  sudo: true
  remote_user: vagrant
  
  vars:
      GAME_NAME: mmowgli
      JDK_URL: http://download.oracle.com/otn-pub/java/jdk/8u65-b17/jdk-8u65-linux-x64.tar.gz
      JDK_VERSION: jdk1.8.0_65
      JCE_URL: http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip
      ZOOKEEPER_URL: http://apache.mirrorcatalogs.com/zookeeper/zookeeper-3.4.7/zookeeper-3.4.7.tar.gz
      ZOOKEEPER_VERSION: zookeeper-3.4.7
      ZOOKEEPER_PORT: 2181
      ZOOKEEPER_UID: 510
      ZOOKEEPER_GUID: 510
      MYSQL_PORT: 3306
      ACTIVE_MQ_URL: http://apache.cs.utah.edu/activemq/5.13.0/apache-activemq-5.13.0-bin.tar.gz
      ACTIVE_MQ_VERSION: apache-activemq-5.13.0
      ACTIVE_MQ_MANAGEMENT_PORT: 8161
      ACTIVE_MQ_DATA_PORT: 61616
      # UDP ports
      SMB_PORT1: 137
      SMB_PORT2: 138
      # TCP port
      SMB_PORT3: 139
      
      # There are better ways to handle passwords in ansible
      SMB_USER: mmowgli
      SMB_USER_PASSWORD: mmowgli
      
      # The directory we share with tomcats and the front-end web server
      SMB_EXPORT_DIRECTORY: /exports/mmowgli
      
      
  tasks:
      
    - name: debug
      debug: msg="Hello world"

    - name: get jdk
      command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{ JDK_URL }} -O /tmp/jdk1.8.tar.gz"

    - name: install JDK
      unarchive: src=/tmp/jdk1.8.tar.gz dest=/usr/java copy=no

    - name: symlinks for jdk
      file: state=link src=/usr/java/{{ JDK_VERSION }} dest=/usr/java/default

    - name: symlinks for jdk
      file: state=link src=/usr/java/{{ JDK_VERSION }} dest=/usr/java/latest

    - name: get java cryptography extensions
      command: "wget --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{ JCE_URL }} -O /tmp/jce.zip"

    - name: create dir to hold jce
      file: state=directory dest=/tmp/jce

    - name: unzip java cryptography extensions
      unarchive: copy=no src=/tmp/jce.zip dest=/tmp/jce

    - name: Copy jce jar files to destination
      command: cp /tmp/jce/UnlimitedJCEPolicyJDK8/local_policy.jar /usr/java/default/jre/lib/security/local_policy.jar

    - name: copy jce jar file to destination
      command: cp /tmp/jce/UnlimitedJCEPolicyJDK8/US_export_policy.jar /usr/java/default/jre/lib/security/US_export_policy.jar

    - name: set permissions on java directory
      file: path=/usr/java/{{ JDK_VERSION }} owner=root group=root state=directory recurse=yes
    
    # Install zookeeper, a piece of software that can select a lead tomcat from the tomcat
    # cluster.
    - name: create zookeepr group
      group: state=present name=zookeeper gid={{ ZOOKEEPER_GUID }}

    - name: create zookeeper user
      user: name=zookeeper comment="Zookeeper user" createhome=yes state=present group=zookeeper shell=/sbin/nologin uid={{ ZOOKEEPER_UID }}

    - name: ensure .bashrc present
      copy: src=files/bashrc dest=/home/zookeeper/.bashrc owner=zookeeper group=zookeeper

    - name: ensure .bash_profile present, has path for java
      copy: src=files/bash_profile dest=/home/zookeeper/.bash_profile owner=zookeeper group=zookeeper
      
    - name: get zookeeper
      command: "wget {{ ZOOKEEPER_URL }} -O /tmp/zookeeper.tar.gz"
    
    - name: unarchive zookeeper
      unarchive: copy=no src=/tmp/zookeeper.tar.gz dest=/usr/java
      
    - name: copy zookeeper init.d file
      template: src=templates/zookeeper.jn2 dest=/etc/init.d/zookeeper
      
    - name: zookeeper init file permisions
      file: path=/etc/init.d/zookeeper owner=root group=root mode=755
      
    - name: add zookeeper init file
      command: "/sbin/chkconfig --add zookeeper"
    
    - name: zookeeper config file
      template: src=templates/zoo.cfg.jn2 dest=/usr/java/{{ ZOOKEEPER_VERSION }}/conf/zoo.cfg mode=0644
      
    - name: set permissions on zookeper directory
      file: path=/usr/java/{{ ZOOKEEPER_VERSION }} owner=zookeeper group=zookeeper state=directory recurse=yes
      
    - name: start zookeeper
      service: state=started name=zookeeper
      
    - name: open zookeeper port through firewall
      lineinfile: dest=/etc/ferm/ferm.conf
              line='proto tcp dport ({{ ZOOKEEPER_PORT }}) ACCEPT;'
              insertafter='# Ansible specified rules.'
      notify: run ferm
      
      
    # Install MySQL
    - name: Install mysql
      yum: pkg={{ item }} state=installed enablerepo=remi
      with_items:
          - mysql
          - mysql-devel
          - mysql-server
          - mysql-libs
          
    - name: mysql service startup
      service: name=mysqld state=started
      
    - name: open mysql port through firewall
      lineinfile: dest=/etc/ferm/ferm.conf
              line='proto tcp dport ({{ MYSQL_PORT }}) ACCEPT;'
              insertafter='# Ansible specified rules.'
      notify: run ferm
      
    # Should lock it down with root password, etc here, or in another configuration
    # script.
    
    # Install apache-mq. 
    
    - name: Retrieve apache active-mq
      command: "wget {{ ACTIVE_MQ_URL }} -O /tmp/activemq.tar.gz"
      
    - name: unarchive activemq
      unarchive: copy=no src=/tmp/activemq.tar.gz dest=/usr/java
      
    - name: place the init.d file
      template: src=templates/activemq.jn2 dest=/etc/init.d/activemq owner=root group=root mode=0755
      
    - name: start activemq service
      service: name=activemq state=started
      
    - name: open activemq data port through firewall
      lineinfile: dest=/etc/ferm/ferm.conf
              line='proto tcp dport ({{ ACTIVE_MQ_DATA_PORT }}) ACCEPT;'
              insertafter='# Ansible specified rules.'
      notify: run ferm
      
    - name: open activemq management port through firewall
      lineinfile: dest=/etc/ferm/ferm.conf
              line='proto tcp dport ({{ ACTIVE_MQ_MANAGEMENT_PORT }}) ACCEPT;'
              insertafter='# Ansible specified rules.'
      notify: run ferm
      
    # Install samba file server
    
    - name: ensure directory to share is present
      file: path={{ SMB_EXPORT_DIRECTORY }} state=directory mode=0755 owner={{ SMB_USER }} group={{ SMB_USER }}
      
    - name: Start smb service on boot
      command: chkconfig smb on
      
    - name: smb credentials file
      template: src=templates/smb-credentials.txt.jn2 dest=/etc/smb-credentials.txt
      
    - name: SMB server configuration file
      template: src=templates/smb.conf.jn2 dest=/etc/samba/smb.conf
      
    - name: SMB authentication database using tdbsam
      command: "echo -ne {{ SMB_USER_PASSWORD }}\n{{ SMB_USER_PASSWORD }}) | smbpasswd -a {{ SMB_USER }}"
    
    - name: make fstab entry for smb
      lineinfile: dest=/etc/fstab
                  line="//mmowgliServer/images /mmowgli/shared/images   cifs    credentials=/etc/smb-credentials.txt,uid={{ SMB_USER }},gid={{ SMB_USER }},rw           0 0"
    - name: start smb service
      service: name=smb state=started
      
    - name: open smb port through firewall
      lineinfile: dest=/etc/ferm/ferm.conf
              line='proto tcp dport ({{ SMB_PORT3 }}) ACCEPT;'
              insertafter='# Ansible specified rules.'
      notify: run ferm
      
    - name: open smb udp port through firewall
      lineinfile: dest=/etc/ferm/ferm.conf
              line='proto udp dport {{ SMB_PORT1 }} ACCEPT;'
              insertafter='# Ansible specified rules.'
      notify: run ferm
      
    - name: open smb udp port through firewall
      lineinfile: dest=/etc/ferm/ferm.conf
              line='proto udp dport {{ SMB_PORT2 }} ACCEPT;'
              insertafter='# Ansible specified rules.'
      notify: run ferm
      
  # Handlers run once and only once when notified by N tasks
  handlers:
      
    # see http://tjelvarolsson.com/blog/how-to-manage-firewalls-using-ferm-and-ansible/ for details on ferm
    - name: run ferm
      command: ferm /etc/ferm/ferm.conf
      notify: save iptables

    - name: save iptables
      command: service iptables save