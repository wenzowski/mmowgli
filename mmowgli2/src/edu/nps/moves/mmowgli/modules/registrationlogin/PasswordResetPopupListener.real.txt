/*
 * Program:      MMOWGLI
 *
 * Filename:     PasswordResetPopupListener.java
 *
 * Author(s):    Terry Norbraten
 *               http://www.nps.edu and http://www.movesinstitute.org
 *
 * Created on:   Created on Jan 23, 2014 11:10:11 AM
 *
 * Description:  Popup to initiate a forgot password reset process
 *
 * References:
 *
 * URL:          http://www<URL>/PasswordResetPopupListener.java
 *
 * Requirements: 1) JDK 1.5+
 *
 * Assumptions:  1)
 *
 * TODO:
 *
 * Copyright (c) 1995-2014 held by the author(s).  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer
 *       in the documentation and/or other materials provided with the
 *       distribution.
 *     * Neither the names of the Naval Postgraduate School (NPS)
 *       Modeling Virtual Environments and Simulation (MOVES) Institute
 *       (http://www.nps.edu and http://www.movesinstitute.org)
 *       nor the names of its contributors may be used to endorse or
 *       promote products derived from this software without specific
 *       prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package edu.nps.moves.mmowgli.modules.registrationlogin;

import java.util.List;

import org.hibernate.Session;

import com.vaadin.data.validator.EmailValidator;
import com.vaadin.event.ShortcutAction;
import com.vaadin.ui.*;

import edu.nps.moves.mmowgli.components.MmowgliDialog;
import edu.nps.moves.mmowgli.db.*;
import edu.nps.moves.mmowgli.db.pii.EmailPii;
import edu.nps.moves.mmowgli.db.pii.UserPii;
import edu.nps.moves.mmowgli.hibernate.VHibPii;

/**
 * Allow a registered user to reset their forgotten password
 * @author <a href="mailto:tdnorbra@nps.edu?subject=edu.nps.moves.mmowgli.modules.registrationLogin.PasswordResetPopupListener">Terry Norbraten, NPS MOVES</a>
 * @version $Id: PasswordResetPopupListener.java 3305 2014-02-01 00:02:34Z tdnorbra $
 */
public class PasswordResetPopupListener extends MmowgliDialog implements Button.ClickListener
{
    private static final long serialVersionUID = 8282736664554448888L;

    private User user; // what gets returned
    private TextField userIDTf, emailTf;

    private String email;
    private boolean error = false;

    /**
     * Default Constructor
     * @param app the main Vaadin application currently running
     * @param listener the end listener to listen for cancel events
     * @param user the User who wishes to reset their password
     */
    public PasswordResetPopupListener(Button.ClickListener listener, User user) {
        super(listener);
        super.initGui();
        this.user = user;

        setTitleString("Please fill in your User ID and Email address to initiate a password reset");

        contentVLayout.setSpacing(true);

        // Use an actual form widget here for data binding and error display.
        FormLayout formLay = new FormLayout();
        formLay.setSizeUndefined();
        formLay.addStyleName("m-login-form");  // to allow styling contents (v-textfield)
        contentVLayout.addComponent(formLay);
        contentVLayout.setComponentAlignment(formLay, Alignment.TOP_CENTER);

        formLay.addComponent(userIDTf = new TextField("User ID:"));
        userIDTf.addStyleName("m-dialog-textfield");
        userIDTf.setWidth("85%");
        userIDTf.setTabIndex(100);

        // Help out a little here
        if (user != null) {
            userIDTf.setValue(user.getUserName());
        }

        formLay.addComponent(emailTf = new TextField("Email:"));
        emailTf.addStyleName("m-dialog-textfield");
        emailTf.setWidth("85%");
        emailTf.setTabIndex(101);

        HorizontalLayout hl = new HorizontalLayout();
        hl.setWidth("100%");
        contentVLayout.addComponent(hl);

        Label lab;
        hl.addComponent(lab = new Label());
        hl.setExpandRatio(lab, 1.0f);

        NativeButton continueButt = new NativeButton(null);
        continueButt.setStyleName("m-continueButton");
        hl.addComponent(continueButt);
        continueButt.addListener(PasswordResetPopupListener.this);
        continueButt.setClickShortcut(ShortcutAction.KeyCode.ENTER);

        hl.addComponent(lab = new Label());
        lab.setWidth("15px");
        emailTf.focus();
    }

    @Override
    protected void cancelClicked(Button.ClickEvent event) {
        getUI().setScrollTop(0);//app.getMainWindow().setScrollTop(0);
        getUI().removeWindow(this);//app.getMainWindow().removeWindow(this);

        // We don't want to call super.cancelClicked(event); here b/c the
        // RegistraionPageBase (end listener) has no idea who we are
        // and will think we are an instance of the LoginPopup
    }

    /**
     * @return the user or null if canceled
     */
    @Override
    public User getUser() {
        return user;
    }

    /**
     * Used by the parent class when cancel is hit
     * @param u the User to set
     */
    @Override
    public void setUser(User u) {
        user = u;
    }

    // Lots of stuff borrowed from RegistrationPagePopupFirst
    @Override
    public void buttonClick(Button.ClickEvent event) {

        performChecks(event);

        if (!error) {
            makeResetAnnounceDialog();
        }

        // reset for next attempt
        error = false;
    }

    private void performChecks(Button.ClickEvent event) {

        Window browserWindow = event.getButton().getWindow();

        // emailTf, userIDTf

        // Checks:
        // 1. Email address has ampersand
        email = emailTf.getValue().toString().trim();
        EmailValidator v=new EmailValidator("");
        if(email == null || !v.isValid(email)) {
            errorOut("Invalid email address entered.", browserWindow);
            return;
        }

        // 2 Check that is in DB
        if (RegistrationPagePopupFirst.checkEmail(email)) {
            errorOut("Email address not found in database for user: " + user.getUserName() + ".", browserWindow);
            return;
        }

        Session sess = VHibPii.getASession();
        UserPii uPii = VHibPii.getUserPii(user.getId(), sess, false);
        List<EmailPii> ePii = uPii.getEmailAddresses();

        boolean emailChecks = false;

        // 3. Continue email checks
        for (EmailPii e : ePii) {
            if (e.getAddress().equalsIgnoreCase(email)) {
                emailChecks = true;
            }
        }

        sess.close();

        if (!emailChecks) {
            errorOut("Email address not associated with user: " + user.getUserName() + ".", browserWindow);
            return;
        }

        // 4. Check user account status
        if (user.isAccountDisabled()) {
            errorOut("This account has been disabled.", browserWindow);
            return;
        }

        Game g = Game.get(1L);

        // 5. Check user email confirmation status
        if (g.isEmailConfirmation() && !user.isEmailConfirmed()) {
            errorOut("This email address has not yet been confirmed.", browserWindow);
        } else {

            // did not fail confirm check; if confirmation off, make sure they can get in in the future or questions will arise
            user.setEmailConfirmed(true);
            User.update(user);

            // Set the user for uId reference later when confirm code link is clicked
            PasswordResetDialog.setUser(user);

        }
    }

    private void makeResetAnnounceDialog() {

        // Close the previous dialog and show this announcement
        cancelClicked(null);

        final Window resetAnnounceDialog = new Window("Password Reset Announcement");
        resetAnnounceDialog.setModal(true);
        resetAnnounceDialog.setClosable(false);
        VerticalLayout vLay = (VerticalLayout) resetAnnounceDialog.getContent();
        vLay.setMargin(true);
        vLay.setSpacing(true);
        vLay.setSizeUndefined();
        vLay.setWidth("400px");

        Label message = new Label(
                "An email has been sent to " + user.getUserName() + " at <b>" + email + "</b>.");
        resetAnnounceDialog.addComponent(message);
        message.setContentMode(Label.CONTENT_XHTML);

        message = new Label(
                "Follow the link in the message "
                + "to confirm your password reset request to enable login to your mmowgli user account.");
        resetAnnounceDialog.addComponent(message);

        message = new Label(
                "Please be advised that you will only have three hours to complete this process, after which time "
                        + "you will have to re-initiate a new password reset process from the game login page.");
        resetAnnounceDialog.addComponent(message);

        message = new Label(
                "Now, press <b>Homepage -- Return to login</b> after receiveing a reset request confirmation email.");
        resetAnnounceDialog.addComponent(message);
        message.setContentMode(Label.CONTENT_XHTML);

        GridLayout grid = new GridLayout();
        resetAnnounceDialog.addComponent(grid);

        Button laterButt = new Button("Homepage -- Return to login", new Button.ClickListener() {
            private static final long serialVersionUID = 8282736664554448883L;
            @Override
            public void buttonClick(Button.ClickEvent event) {
                app.setLogoutURL(GameLinks.get().getGameHomeUrl());
                app.close();
            }
        });
        grid.addComponent(laterButt);

        Button troubleButt = new Button("Send trouble report", new Button.ClickListener() {
            private static final long serialVersionUID = 8282736264554448888L;
            @Override
            public void buttonClick(Button.ClickEvent event) {
                app.setLogoutURL(GameLinks.get().getTroubleLink());
                app.close();
            }
        });
        grid.addComponent(troubleButt);

        RegistrationPageBase.openPopupWindow(getUI(), resetAnnounceDialog, 500);

        // This process generates unique uId for this reset process that will
        // need to be confirmed once the user receives a confirmation email and
        // click on the link containing the uId
        PasswordReset pr = new PasswordReset(user);
        PasswordReset.save(pr);

        String confirmUrl = buildConfirmUrl(pr);
        app.globs().applicationMaster().mailManager().sendPasswordResetEmail(app, email, user.getUserName(), confirmUrl);
    }

    private String buildConfirmUrl(PasswordReset pr) {

        StringBuilder sb = new StringBuilder();
        String gameUrl = app.getURL().toExternalForm();
        sb.append(gameUrl);
        if (!gameUrl.endsWith("/")) {
            sb.append('/');
        }
        sb.append("password?uid=");
        sb.append(pr.getResetCode());

        return sb.toString();
    }

    private void errorOut(String s, Window browserWindow) {
        error = true;
        browserWindow.showNotification("Could not process password reset", s, Notification.TYPE_ERROR_MESSAGE);
    }

} // end class file PasswordResetListener.java
