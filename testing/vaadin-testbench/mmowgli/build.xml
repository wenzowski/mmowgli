<?xml version="1.0" encoding="UTF-8"?>

<project name="MMOWGLI Test Bench" basedir="." default="run-and-clean-up">

    <!--
    Configuration for Windows PCs:
    1) Uncomment the property "browsers" for winxp
    2) Open the file ../grid/remote-control/rc_configuration.xml and uncomment
       the properties for "Windows Target Environments"
    -->

    <property name="selenium-hub.jar" location="../grid/hub/lib/selenium-grid-hub-standalone-vaadin-testbench-2.2.0.jar"/>
    <property name="selenium-rc.jar" location="../grid/remote-control/lib/selenium-grid-remote-control-standalone-vaadin-testbench-2.2.0.jar"/>
    <property name="selenium-server.jar" location="../grid/remote-control/lib/selenium-server-1.0.1.jar"/>

    <!-- Host running TestBench RC or TestBench Hub -->
    <property name="com.vaadin.testbench.tester.host" value="127.0.0.1" />

    <!-- Base url where the testable application is deployed.  first property is set. -->
    <property name="com.vaadin.testbench.deployment.url" value="http://test.mmowgli.nps.edu/cluster/"/>
    <property name="com.vaadin.testbench.deployment.url" value="http://mmowgli.nps.edu/game/"/>

    <!-- Browsers to use for testing -->
    <!--<property name="browsers" value="winxp-ie6,winxp-ie7,winxp-ie8,winxp-firefox3,winxp-safari4,winxp-opera10,winxp-googlechrome4" />-->

    <!-- Savage Lab machines -->
    <!--property name="browsers" value="winxp-ie8,winxp-firefox36"/-->

    <!-- NPS User machines (Lab machines SP-250) -->
    <property name="browsers" value="winxp-ie7"/>

    <!-- Mac ,osx-safari4-->
    <!--property name="browsers" value="osx-firefox35"/-->

    <!-- Temporary output directory, created and removed by this script -->
    <property name="temp-dir" value="temp-dir" />

    <!-- Base directory for screenshots. References are stored in reference/, errors in error/ -->
    <property name="com.vaadin.testbench.screenshot.directory" location="screenshots" />
	
    <!-- If softfail is true the test will not break due to a screenshot being faulty and will fail only at end of test. -->
    <property name="com.vaadin.testbench.screenshot.softfail" value="true" />
	
    <!-- classpath must include test bench jar and its dependencies -->
    <path id="classpath">
        <fileset dir=".." includes="vaadin-testbench-*.jar" />
    </path>

    <!-- fileset containing all tests to run -->
    <fileset dir="testscripts" id="html-test-files">
        <include name="*.html" />
    </fileset>

    <!-- warning: clean and compile require moving files between directories -->
    <!-- OK to compile -->
    <!-- TODO cp compiled files -->
    <target name="all" depends="run.tests"/>

    <target name="open.game.site">
        <echo message="connecting to ${com.vaadin.testbench.deployment.url}"/>
        <exec executable="open" osfamily="mac">
            <arg value="-a"/>
            <arg value="FireFox"/>
            <arg value="${com.vaadin.testbench.deployment.url}"/>
        </exec>

        <exec executable="rundll32" osfamily="windows">
            <arg value="url.dll"/>
            <arg value="FileProtocolHandler"/>
            <arg value="${com.vaadin.testbench.deployment.url}"/>
        </exec>
        
    </target>

    <!-- This target converts HTML tests files to java junit tests. One java file for each test is created. -->
    <target name="create.tests">
        <pathconvert pathsep=" " property="testfiles" refid="html-test-files">
            <regexpmapper from="^(.*)$$" to="'\1'" />
        </pathconvert>

        <echo>Using test scripts: ${testfiles}</echo>
        <java classname="com.vaadin.testbench.util.TestConverter"
              classpathref="classpath"
              failonerror="true">
                  
            <sysproperty key="com.vaadin.testbench.screenshot.onfail" value="false"/>

            <!-- Uncomment below sysproperty to run test with different value parameter. -->
            <!-- Wanted parameters for each test should be in the same file. -->
            <!-- <sysproperty key="com.vaadin.testbench.converter.parameterFile" value="parameters/NewParameters.properties" /> -->
            <arg value="${temp-dir}/src" />
            <arg value="${browsers}" />
            <arg line="${testfiles}" />
        </java>
    </target>

    <!-- Must be started first before running the remote control -->
    <target name="run.hub">

        <java classpath="../grid/hub:${selenium-hub.jar}"
              classname="com.thoughtworks.selenium.grid.hub.HubServer"
              fork="true"/>

    </target>

    <target name="run.rc">

        <java classpath="${selenium-rc.jar}:${selenium-server.jar}"
              classname="com.thoughtworks.selenium.grid.remotecontrol.SelfRegisteringRemoteControlLauncher"
              fork="true"
              dir="../grid/remote-control">
            <arg line="-userExtensions user-extensions.js -ensureCleanSession"/>
        </java>

    </target>

    <!-- This target complies the generated java junit tests. -->
    <target name="compile.tests">
        <mkdir dir="${temp-dir}" />
        <mkdir dir="${temp-dir}/src" />
        <mkdir dir="${temp-dir}/classes" />
        <javac srcdir="${temp-dir}/src"
               destdir="${temp-dir}/classes"
               debug="on"
               encoding="utf-8"
               includeantruntime="false"
               deprecation="true">
            <classpath>
                <path refid="classpath" />
            </classpath>
        </javac>
    </target>

    <!-- This target runs the generated and compiled junit tests -->
    <target name="run.tests" depends="compile.tests,remove.error.screens">
        <junit fork="yes">
            <classpath>
                <path refid="classpath" />
                <pathelement path="${temp-dir}/classes" />
            </classpath>

            <formatter type="brief" usefile="false" />
				
            <jvmarg value="-Dcom.vaadin.testbench.tester.host=${com.vaadin.testbench.tester.host}" />
            <jvmarg value="-Dcom.vaadin.testbench.deployment.url=${com.vaadin.testbench.deployment.url}" />
            <jvmarg value="-Dcom.vaadin.testbench.screenshot.directory=${com.vaadin.testbench.screenshot.directory}" />
            <jvmarg value="-Dcom.vaadin.testbench.screenshot.softfail=${com.vaadin.testbench.screenshot.softfail}" />

            <!-- To request screenshots of a predefined size uncomment the jvmarg and set the wanted resolution -->
            <!-- <jvmarg value="-Dcom.vaadin.testbench.screenshot.resolution=600x400" /> -->
			
            <batchtest>
                <fileset dir="${temp-dir}/src">
                    <include name="**/**.java" />
                </fileset>
            </batchtest>
        </junit>

    </target>

    <!-- NOTE: Use from command line only as this will kill all java processes currently running -->
    <target name="kill.all.java">

        <echo message="running kill.all.java (which also kills ant)"/>
        <exec executable="sh" osfamily="mac">
            <arg value="-c"/>
            <arg value="ps -ef | grep java | awk '{print $2}' | xargs kill"/>
        </exec>

         <!-- Hopefully this works for WinXP -->
         <exec executable="taskkill" osfamily="windows">
            <arg line="-f /im java.exe"/>
        </exec>
        <!-- TODO unreachable -->
        <echo message="kill.all.java complete"/>
    </target>

    <!-- Remove old error screenshots. -->
    <target name="remove.error.screens">
        <delete dir="${com.vaadin.testbench.screenshot.directory}" failonerror="false"/>
        <mkdir dir="${com.vaadin.testbench.screenshot.directory}/errors" />
    </target>

    <!-- Remove temporary source and compiled java files -->
    <target name="remove.temp.files">
        <delete dir="${temp-dir}"/>
    </target>

    <target name="clean" depends="remove.temp.files,remove.error.screens"/>

    <!-- these are VaadinTestbench extensions of a jUnit test -->
    <!-- TODO create tests are currently dependent on OSX:  create similar directors for winxp and search/replace osx to winxp -->
    <target name="setup.createUserCluster">
        <mkdir  dir="temp-dir/src/" />
        <copy todir="temp-dir/src/"  overwrite="true" verbose="true">
            <fileset dir="temp-dir.save/src/" includes="createUserCluster/**"/>
        </copy>
    </target>
    <target name="setup.createUserMainGame">
        <mkdir  dir="temp-dir/src/" />
        <copy todir="temp-dir/src/"  overwrite="true" verbose="true">
            <fileset dir="temp-dir.save/src/" includes="createUserMainGame/**"/>
        </copy>
    </target>
    <target name="setup.loadTestCluster">
        <mkdir  dir="temp-dir/src/" />
        <copy todir="temp-dir/src/"  overwrite="true" verbose="true">
            <fileset dir="temp-dir.save/src/" includes="loadTestCluster/**"/>
        </copy>
    </target>
    <target name="setup.loadTestMainGame" depends="clean">
        <mkdir  dir="temp-dir/src/" />
        <copy todir="temp-dir/src/"  overwrite="true" verbose="true">
            <fileset dir="temp-dir.save/src/" includes="loadTestMainGame/**"/>
        </copy>
    </target>
    <!-- reconfiguration after database wipe; directories are /game/ (on both servers) and /cluster/ (on test server) -->
    <target name="setup.MainGameTests" depends="clean,setup.createUserMainGame,setup.loadTestMainGame"/>

    <target name="setup.ClusterTests"  depends="clean,setup.createUserCluster,setup.loadTestCluster"/>

    <property name="zip.filename" value="mmowgli-vaadin-testbench.zip" />
    <target name="zip">
        <zip destfile="../../${zip.filename}" >
            <zipfileset dir=".." prefix="">
                <include name="**/*"/>
                <exclude name="**/.svn/*"/>
                <exclude name="**/*.bak"/>
                <exclude name="**/*.$$$$$$"/>
                <exclude name="**/*.$$$$$$"/><!-- escape $ as $$ -->
                <exclude name="**/Thumbs.db"/>
            </zipfileset>
        </zip>
        <length property="zip.filename.length" file="../../${zip.filename}"/>
        <echo>${zip.filename} (${zip.filename.length} bytes) complete</echo>
    </target>

</project>
